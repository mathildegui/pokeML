name: Create Release and upload artifacts
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches: [ main ]

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # Specify branch from where you are sharing build
          ref: 'main'
      - name: Setup release information
        run: |
          versionName=`sed -n 's#versionName ##p' app/build.gradle| cut -d \" -f2`
          export VERSION_NAME=$versionName
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

          keyPassword=`sed -n 's#keyPassword ##p' app/build.gradle| cut -d \' -f2`
          export KEY_PASSWORD=$keyPassword
          echo "KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV

          keyStorePassword=`sed -n 's#storePassword ##p' app/build.gradle| cut -d \' -f2`
          export KEY_STORE_PASSWORD=$keyStorePassword
          echo "KEY_STORE_PASSWORD=$KEY_STORE_PASSWORD" >> $GITHUB_ENV

          keyAlias=`sed -n 's#keyAlias ##p' app/build.gradle| cut -d \' -f2`
          export ALIAS=$keyAlias
          echo "ALIAS=$ALIAS" >> $GITHUB_ENV

          storeFile=`sed -n 's#storeFile ##p' app/build.gradle| cut -d \' -f2`
          signingKey=`openssl base64 < app/$storeFile | tr -d '\n' | tee my_signing_key.jks.base64.txt`
          export SIGNING_KEY=$signingKey
          echo "SIGNING_KEY=$SIGNING_KEY" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          VERSION_NAME: ${{ env.VERSION_NAME }}
        with:
          tag_name: ${{ env.VERSION_NAME }}
          release_name: Release ${{ env.VERSION_NAME }}
          body: |
            Changes in this Release
          draft: false
          prerelease: false
      - name: Settting up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Runing build command
        # Run your own gradle command to generate build.
        run: ./gradlew assembleDebug --stacktrace
      - name: Upload Debug Asset
        id: upload-debug-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: app/build/outputs/apk/debug/app-debug.apk
          #asset_name: app-debug-${{ github.event.debug.tag_name }}.apk
          asset_name: app-debug-${{ env.VERSION_NAME }}.apk
          asset_content_type: application/zip
          #FIXME use this after https://github.com/r0adkll/sign-android-release
          #FIXME Release beta and prod
      - name: Sign app APK
        id: sign-apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ env.SIGNING_KEY }}
          alias: ${{ env.ALIAS }}
          keyStorePassword: ${{ env.KEY_STORE_PASSWORD }}
          keyPassword: ${{ env.KEY_PASSWORD }}
          #env:
          #  // override default build-tools version (29.0.3) -- optional
          #  BUILD_TOOLS_VERSION: "30.0.2"
      - name: Signed app APK upload
        id: signed-apk-upload
        uses: actions/upload-artifact@v2
          with:
            path: ${{ steps.sign-apk.outputs.signedReleaseFile }}